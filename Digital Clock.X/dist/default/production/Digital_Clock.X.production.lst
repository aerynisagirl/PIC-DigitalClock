

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Apr 23 20:43:53 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F1783
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  0007                     	;# 
    29  0008                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0014                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0016                     	;# 
    43  0017                     	;# 
    44  0018                     	;# 
    45  0019                     	;# 
    46  001A                     	;# 
    47  001B                     	;# 
    48  001C                     	;# 
    49  008C                     	;# 
    50  008D                     	;# 
    51  008E                     	;# 
    52  0090                     	;# 
    53  0091                     	;# 
    54  0092                     	;# 
    55  0094                     	;# 
    56  0095                     	;# 
    57  0096                     	;# 
    58  0097                     	;# 
    59  0098                     	;# 
    60  0099                     	;# 
    61  009A                     	;# 
    62  009B                     	;# 
    63  009B                     	;# 
    64  009C                     	;# 
    65  009D                     	;# 
    66  009E                     	;# 
    67  009F                     	;# 
    68  010C                     	;# 
    69  010D                     	;# 
    70  010E                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0113                     	;# 
    74  0114                     	;# 
    75  0115                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  0118                     	;# 
    79  0119                     	;# 
    80  011D                     	;# 
    81  011D                     	;# 
    82  011E                     	;# 
    83  011F                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  0191                     	;# 
    87  0191                     	;# 
    88  0192                     	;# 
    89  0193                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0197                     	;# 
    96  0199                     	;# 
    97  0199                     	;# 
    98  0199                     	;# 
    99  019A                     	;# 
   100  019A                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019B                     	;# 
   107  019C                     	;# 
   108  019C                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019D                     	;# 
   112  019D                     	;# 
   113  019E                     	;# 
   114  019E                     	;# 
   115  019E                     	;# 
   116  019F                     	;# 
   117  019F                     	;# 
   118  019F                     	;# 
   119  019F                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020D                     	;# 
   123  020E                     	;# 
   124  0210                     	;# 
   125  0211                     	;# 
   126  0211                     	;# 
   127  0212                     	;# 
   128  0212                     	;# 
   129  0213                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0214                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  028C                     	;# 
   141  028D                     	;# 
   142  028E                     	;# 
   143  0291                     	;# 
   144  0291                     	;# 
   145  0292                     	;# 
   146  0293                     	;# 
   147  0298                     	;# 
   148  0298                     	;# 
   149  0299                     	;# 
   150  029A                     	;# 
   151  030C                     	;# 
   152  030D                     	;# 
   153  030E                     	;# 
   154  038C                     	;# 
   155  038D                     	;# 
   156  038E                     	;# 
   157  0390                     	;# 
   158  0391                     	;# 
   159  0392                     	;# 
   160  0393                     	;# 
   161  0394                     	;# 
   162  0395                     	;# 
   163  0396                     	;# 
   164  0397                     	;# 
   165  0398                     	;# 
   166  0399                     	;# 
   167  039D                     	;# 
   168  039E                     	;# 
   169  039F                     	;# 
   170  0511                     	;# 
   171  0513                     	;# 
   172  051A                     	;# 
   173  0811                     	;# 
   174  0812                     	;# 
   175  0813                     	;# 
   176  0814                     	;# 
   177  0815                     	;# 
   178  0816                     	;# 
   179  0817                     	;# 
   180  0818                     	;# 
   181  0819                     	;# 
   182  081A                     	;# 
   183  081B                     	;# 
   184  081C                     	;# 
   185  081D                     	;# 
   186  081E                     	;# 
   187  081F                     	;# 
   188  0820                     	;# 
   189  0821                     	;# 
   190  0821                     	;# 
   191  0822                     	;# 
   192  0823                     	;# 
   193  0823                     	;# 
   194  0824                     	;# 
   195  0825                     	;# 
   196  0825                     	;# 
   197  0826                     	;# 
   198  0827                     	;# 
   199  0827                     	;# 
   200  0828                     	;# 
   201  0829                     	;# 
   202  082A                     	;# 
   203  082B                     	;# 
   204  082C                     	;# 
   205  082D                     	;# 
   206  082E                     	;# 
   207  082F                     	;# 
   208  0831                     	;# 
   209  0832                     	;# 
   210  0833                     	;# 
   211  0834                     	;# 
   212  0835                     	;# 
   213  0836                     	;# 
   214  0837                     	;# 
   215  0838                     	;# 
   216  0839                     	;# 
   217  083A                     	;# 
   218  083B                     	;# 
   219  083C                     	;# 
   220  083D                     	;# 
   221  083E                     	;# 
   222  083F                     	;# 
   223  0840                     	;# 
   224  0841                     	;# 
   225  0841                     	;# 
   226  0842                     	;# 
   227  0843                     	;# 
   228  0843                     	;# 
   229  0844                     	;# 
   230  0845                     	;# 
   231  0845                     	;# 
   232  0846                     	;# 
   233  0847                     	;# 
   234  0847                     	;# 
   235  0848                     	;# 
   236  0849                     	;# 
   237  084A                     	;# 
   238  084B                     	;# 
   239  084C                     	;# 
   240  084D                     	;# 
   241  084E                     	;# 
   242  084F                     	;# 
   243  0FE4                     	;# 
   244  0FE5                     	;# 
   245  0FE6                     	;# 
   246  0FE7                     	;# 
   247  0FE8                     	;# 
   248  0FE9                     	;# 
   249  0FEA                     	;# 
   250  0FEB                     	;# 
   251  0FED                     	;# 
   252  0FEE                     	;# 
   253  0FEF                     	;# 
   254                           
   255                           	psect	idataBANK0
   256  0201                     __pidataBANK0:	
   257                           
   258                           ;initializer for _DISPLAY_MAPPING
   259  0201  34B7               	retlw	183
   260  0202  3424               	retlw	36
   261  0203  3473               	retlw	115
   262  0204  3476               	retlw	118
   263  0205  34E4               	retlw	228
   264  0206  34D6               	retlw	214
   265  0207  34D7               	retlw	215
   266  0208  3434               	retlw	52
   267  0209  34F7               	retlw	247
   268  020A  34F6               	retlw	246
   269  020B  3408               	retlw	8
   270                           
   271                           	psect	nvBANK0
   272  003B                     __pnvBANK0:	
   273  003B                     _setTimer:	
   274  003B                     	ds	2
   275  000B                     _INTCON	set	11
   276  000C                     _PORTA	set	12
   277  0018                     _T1CON	set	24
   278  0017                     _TMR1H	set	23
   279  0016                     _TMR1L	set	22
   280  006C                     _RB4	set	108
   281  006D                     _RB5	set	109
   282  005A                     _TMR0IF	set	90
   283  0088                     _TMR1IF	set	136
   284  0095                     _OPTION_REG	set	149
   285  0099                     _OSCCON	set	153
   286  0091                     _PIE1	set	145
   287  008C                     _TRISA	set	140
   288  008D                     _TRISB	set	141
   289  010C                     _LATA	set	268
   290  010D                     _LATB	set	269
   291  018C                     _ANSELA	set	396
   292  018D                     _ANSELB	set	397
   293  020C                     _WPUA	set	524
   294  020D                     _WPUB	set	525
   295                           
   296                           ; #config settings
   297  0000                     
   298                           	psect	cinit
   299  006C                     start_initialization:	
   300  006C                     __initialization:	
   301                           
   302                           ; Clear objects allocated to BANK0
   303  006C  01AB               	clrf	__pbssBANK0& (0+127)
   304  006D  01AC               	clrf	(__pbssBANK0+1)& (0+127)
   305  006E  01AD               	clrf	(__pbssBANK0+2)& (0+127)
   306  006F  01AE               	clrf	(__pbssBANK0+3)& (0+127)
   307  0070  01AF               	clrf	(__pbssBANK0+4)& (0+127)
   308  0071  01B0               	clrf	(__pbssBANK0+5)& (0+127)
   309  0072  01B1               	clrf	(__pbssBANK0+6)& (0+127)
   310  0073  01B2               	clrf	(__pbssBANK0+7)& (0+127)
   311  0074  01B3               	clrf	(__pbssBANK0+8)& (0+127)
   312                           
   313                           ; Initialize objects allocated to BANK0
   314  0075  3001               	movlw	low __pidataBANK0
   315  0076  0084               	movwf	4
   316  0077  3082               	movlw	(high __pidataBANK0)| (0+128)
   317  0078  0085               	movwf	5
   318  0079  3020               	movlw	low __pdataBANK0
   319  007A  0086               	movwf	6
   320  007B  3000               	movlw	high __pdataBANK0
   321  007C  0087               	movwf	7
   322  007D  300B               	movlw	11
   323  007E  3182  220C         	fcall	init_ram
   324  0080                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  0080                     __end_of__initialization:	
   328  0080  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   329  0081  0020               	movlb	0
   330  0082  3182  2A12         	ljmp	_main	;jump to C main() function
   331                           
   332                           	psect	bssBANK0
   333  002B                     __pbssBANK0:	
   334  002B                     _displayValue:	
   335  002B                     	ds	5
   336  0030                     _timeHours:	
   337  0030                     	ds	1
   338  0031                     _timeMinutes:	
   339  0031                     	ds	1
   340  0032                     _timeSeconds:	
   341  0032                     	ds	1
   342  0033                     _displayDigit:	
   343  0033                     	ds	1
   344                           
   345                           	psect	dataBANK0
   346  0020                     __pdataBANK0:	
   347  0020                     _DISPLAY_MAPPING:	
   348  0020                     	ds	11
   349                           
   350                           	psect	inittext
   351  020C                     init_ram:	
   352  020C  00FE               	movwf	126
   353  020D                     initloop:	
   354  020D  0012               	moviw fsr0++
   355  020E  001E               	movwi fsr1++
   356  020F  0BFE               	decfsz	126,f
   357  0210  2A0D               	goto	initloop
   358  0211  3400               	retlw	0
   359                           
   360                           	psect	cstackCOMMON
   361  0070                     __pcstackCOMMON:	
   362  0070                     ?_setup:	
   363  0070                     ?_main:	
   364                           ; 0 bytes @ 0x0
   365                           
   366  0070                     ?_updateClock:	
   367                           ; 0 bytes @ 0x0
   368                           
   369  0070                     ??_updateClock:	
   370                           ; 0 bytes @ 0x0
   371                           
   372  0070                     ?_multiplexDisplay:	
   373                           ; 0 bytes @ 0x0
   374                           
   375  0070                     ??_multiplexDisplay:	
   376                           ; 0 bytes @ 0x0
   377                           
   378  0070                     ?_updateDisplay:	
   379                           ; 0 bytes @ 0x0
   380                           
   381  0070                     ?_onInterrupt:	
   382                           ; 0 bytes @ 0x0
   383                           
   384  0070                     ?___awmod:	
   385                           ; 0 bytes @ 0x0
   386                           
   387  0070                     ___awmod@divisor:	
   388                           ; 2 bytes @ 0x0
   389                           
   390                           
   391                           ; 2 bytes @ 0x0
   392  0070                     	ds	2
   393  0072                     ___awmod@dividend:	
   394                           
   395                           ; 2 bytes @ 0x2
   396  0072                     	ds	2
   397  0074                     ??___awmod:	
   398                           
   399                           ; 0 bytes @ 0x4
   400  0074                     	ds	1
   401  0075                     ___awmod@counter:	
   402                           
   403                           ; 1 bytes @ 0x5
   404  0075                     	ds	1
   405  0076                     ___awmod@sign:	
   406                           
   407                           ; 1 bytes @ 0x6
   408  0076                     	ds	1
   409  0077                     ?___awdiv:	
   410  0077                     ___awdiv@divisor:	
   411                           ; 2 bytes @ 0x7
   412                           
   413                           
   414                           ; 2 bytes @ 0x7
   415  0077                     	ds	2
   416  0079                     ___awdiv@dividend:	
   417                           
   418                           ; 2 bytes @ 0x9
   419  0079                     	ds	2
   420  007B                     ??___awdiv:	
   421                           
   422                           ; 0 bytes @ 0xB
   423  007B                     	ds	1
   424  007C                     ??_onInterrupt:	
   425                           
   426                           ; 0 bytes @ 0xC
   427  007C                     	ds	2
   428                           
   429                           	psect	cstackBANK0
   430  0034                     __pcstackBANK0:	
   431  0034                     ___awdiv@counter:	
   432                           
   433                           ; 1 bytes @ 0x0
   434  0034                     	ds	1
   435  0035                     ___awdiv@sign:	
   436                           
   437                           ; 1 bytes @ 0x1
   438  0035                     	ds	1
   439  0036                     ___awdiv@quotient:	
   440                           
   441                           ; 2 bytes @ 0x2
   442  0036                     	ds	2
   443  0038                     ??_updateDisplay:	
   444                           
   445                           ; 0 bytes @ 0x4
   446  0038                     	ds	3
   447  003B                     ??_setup:	
   448  003B                     ??_main:	
   449                           ; 0 bytes @ 0x7
   450                           
   451                           
   452                           	psect	maintext
   453  0212                     __pmaintext:	
   454                           ; 0 bytes @ 0x7
   455 ;;
   456 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   457 ;;
   458 ;; *************** function _main *****************
   459 ;; Defined at:
   460 ;;		line 115 in file "Main.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;		None
   463 ;; Auto vars:     Size  Location     Type
   464 ;;		None
   465 ;; Return value:  Size  Location     Type
   466 ;;		None               void
   467 ;; Registers used:
   468 ;;		wreg, status,2, status,0, pclath, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : B1F/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   474 ;;      Params:         0       0       0       0       0       0       0       0
   475 ;;      Locals:         0       0       0       0       0       0       0       0
   476 ;;      Temps:          0       0       0       0       0       0       0       0
   477 ;;      Totals:         0       0       0       0       0       0       0       0
   478 ;;Total ram usage:        0 bytes
   479 ;; Hardware stack levels required when called:    4
   480 ;; This function calls:
   481 ;;		_setup
   482 ;; This function is called by:
   483 ;;		Startup code after reset
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           
   488                           ;psect for function _main
   489  0212                     _main:	
   490                           
   491                           ;Main.c: 116: setup();
   492                           
   493                           ;incstack = 0
   494                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   495  0212  3181  2196  3182   	fcall	_setup
   496  0215                     l60:	
   497                           ;Main.c: 119: while (1) {
   498                           
   499  0215  2A15               	goto	l60
   500  0216                     __end_of_main:	
   501                           
   502                           	psect	text1
   503  0196                     __ptext1:	
   504 ;; *************** function _setup *****************
   505 ;; Defined at:
   506 ;;		line 78 in file "Main.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;		None               void
   513 ;; Registers used:
   514 ;;		wreg, status,2
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   520 ;;      Params:         0       0       0       0       0       0       0       0
   521 ;;      Locals:         0       0       0       0       0       0       0       0
   522 ;;      Temps:          0       0       0       0       0       0       0       0
   523 ;;      Totals:         0       0       0       0       0       0       0       0
   524 ;;Total ram usage:        0 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    3
   527 ;; This function calls:
   528 ;;		Nothing
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _setup
   536  0196                     _setup:	
   537                           
   538                           ;Main.c: 80: OSCCON = 0x68;
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _setup: [wreg+status,2]
   542  0196  3068               	movlw	104
   543  0197  0021               	movlb	1	; select bank1
   544  0198  0099               	movwf	25	;volatile
   545                           
   546                           ;Main.c: 81: OPTION_REG = 0x5F;
   547  0199  305F               	movlw	95
   548  019A  0095               	movwf	21	;volatile
   549                           
   550                           ;Main.c: 82: TMR1H = 0xFF;
   551  019B  30FF               	movlw	255
   552  019C  0020               	movlb	0	; select bank0
   553  019D  0097               	movwf	23	;volatile
   554                           
   555                           ;Main.c: 83: TMR1L = 0xFF;
   556  019E  30FF               	movlw	255
   557  019F  0096               	movwf	22	;volatile
   558                           
   559                           ;Main.c: 84: T1CON = 0x85;
   560  01A0  3085               	movlw	133
   561  01A1  0098               	movwf	24	;volatile
   562                           
   563                           ;Main.c: 87: INTCON = 0xE0;
   564  01A2  30E0               	movlw	224
   565  01A3  008B               	movwf	11	;volatile
   566                           
   567                           ;Main.c: 88: PIE1 = 0x01;
   568  01A4  3001               	movlw	1
   569  01A5  0021               	movlb	1	; select bank1
   570  01A6  0091               	movwf	17	;volatile
   571                           
   572                           ;Main.c: 91: TRISA = 0x00;
   573  01A7  018C               	clrf	12	;volatile
   574                           
   575                           ;Main.c: 92: ANSELA = 0x00;
   576  01A8  0023               	movlb	3	; select bank3
   577  01A9  018C               	clrf	12	;volatile
   578                           
   579                           ;Main.c: 93: WPUA = 0x00;
   580  01AA  0024               	movlb	4	; select bank4
   581  01AB  018C               	clrf	12	;volatile
   582                           
   583                           ;Main.c: 94: PORTA = 0x00;
   584  01AC  0020               	movlb	0	; select bank0
   585  01AD  018C               	clrf	12	;volatile
   586                           
   587                           ;Main.c: 96: TRISB = 0xF0;
   588  01AE  30F0               	movlw	240
   589  01AF  0021               	movlb	1	; select bank1
   590  01B0  008D               	movwf	13	;volatile
   591                           
   592                           ;Main.c: 97: ANSELB = 0x00;
   593  01B1  0023               	movlb	3	; select bank3
   594  01B2  018D               	clrf	13	;volatile
   595                           
   596                           ;Main.c: 98: WPUB = 0x30;
   597  01B3  3030               	movlw	48
   598  01B4  0024               	movlb	4	; select bank4
   599  01B5  008D               	movwf	13	;volatile
   600                           
   601                           ;Main.c: 99: LATB = 0x00;
   602  01B6  0022               	movlb	2	; select bank2
   603  01B7  018D               	clrf	13	;volatile
   604                           
   605                           ;Main.c: 103: timeSeconds = 0;
   606  01B8  0020               	movlb	0	; select bank0
   607  01B9  01B2               	clrf	_timeSeconds
   608                           
   609                           ;Main.c: 104: timeMinutes = 0;
   610  01BA  01B1               	clrf	_timeMinutes
   611                           
   612                           ;Main.c: 105: timeHours = 0;
   613  01BB  01B0               	clrf	_timeHours
   614                           
   615                           ;Main.c: 107: setTimer = 500 - 1;
   616  01BC  30F3               	movlw	243
   617  01BD  00BB               	movwf	_setTimer
   618  01BE  3001               	movlw	1
   619  01BF  00BC               	movwf	_setTimer+1
   620  01C0  0008               	return
   621  01C1                     __end_of_setup:	
   622                           
   623                           	psect	intentry
   624  0004                     __pintentry:	
   625 ;; *************** function _onInterrupt *****************
   626 ;; Defined at:
   627 ;;		line 181 in file "Main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;		None               void
   634 ;; Registers used:
   635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   641 ;;      Params:         0       0       0       0       0       0       0       0
   642 ;;      Locals:         0       0       0       0       0       0       0       0
   643 ;;      Temps:          2       0       0       0       0       0       0       0
   644 ;;      Totals:         2       0       0       0       0       0       0       0
   645 ;;Total ram usage:        2 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		_multiplexDisplay
   650 ;;		_updateClock
   651 ;;		_updateDisplay
   652 ;; This function is called by:
   653 ;;		Interrupt level 1
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657  0004                     _onInterrupt:	
   658                           
   659                           ;incstack = 0
   660                           ; Regs used in _onInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   661  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   662  0005  3180               	pagesel	$
   663  0006  0020               	movlb	0	; select bank0
   664  0007  087F               	movf	127,w
   665  0008  00FD               	movwf	??_onInterrupt+1
   666                           
   667                           ;Main.c: 183: if (TMR1IF) {
   668  0009  1C11               	btfss	17,0	;volatile
   669  000A  2816               	goto	i1l906
   670                           
   671                           ;Main.c: 184: TMR1IF = 0x00;
   672  000B  1011               	bcf	17,0	;volatile
   673                           
   674                           ;Main.c: 187: TMR1H = 0xBF;
   675  000C  30BF               	movlw	191
   676  000D  0097               	movwf	23	;volatile
   677                           
   678                           ;Main.c: 188: TMR1L = 0xFD;
   679  000E  30FD               	movlw	253
   680  000F  0096               	movwf	22	;volatile
   681                           
   682                           ;Main.c: 191: updateClock();
   683  0010  3181  21E4  3180   	fcall	_updateClock
   684                           
   685                           ;Main.c: 192: updateDisplay();
   686  0013  3180  2084  3180   	fcall	_updateDisplay
   687  0016                     i1l906:	
   688                           
   689                           ;Main.c: 193: }
   690                           ;Main.c: 196: if (TMR0IF) {
   691  0016  1D0B               	btfss	11,2	;volatile
   692  0017  2865               	goto	i1l92
   693                           
   694                           ;Main.c: 197: TMR0IF = 0x00;
   695  0018  110B               	bcf	11,2	;volatile
   696                           
   697                           ;Main.c: 200: multiplexDisplay();
   698  0019  3181  21C1  3180   	fcall	_multiplexDisplay
   699                           
   700                           ;Main.c: 203: if (!RB4 && RB5) {
   701  001C  0020               	movlb	0	; select bank0
   702  001D  1E0D               	btfss	13,4	;volatile
   703  001E  1E8D               	btfss	13,5	;volatile
   704  001F  2841               	goto	i1l936
   705                           
   706                           ;Main.c: 204: setTimer++;
   707  0020  3001               	movlw	1
   708  0021  07BB               	addwf	_setTimer,f
   709  0022  3000               	movlw	0
   710  0023  3DBC               	addwfc	_setTimer+1,f
   711                           
   712                           ;Main.c: 207: if (setTimer == 500) {
   713  0024  30F4               	movlw	244
   714  0025  063B               	xorwf	_setTimer,w
   715  0026  1D03               	skipz
   716  0027  2841               	goto	i1l936
   717  0028  033C               	decf	_setTimer+1,w
   718  0029  1D03               	btfss	3,2
   719  002A  2841               	goto	i1l936
   720                           
   721                           ;Main.c: 208: setTimer = 0;
   722  002B  01BB               	clrf	_setTimer
   723  002C  01BC               	clrf	_setTimer+1
   724                           
   725                           ;Main.c: 210: timeMinutes++;
   726  002D  3001               	movlw	1
   727  002E  00FC               	movwf	??_onInterrupt
   728  002F  087C               	movf	??_onInterrupt,w
   729  0030  07B1               	addwf	_timeMinutes,f
   730                           
   731                           ;Main.c: 212: if (timeMinutes == 60) {
   732  0031  303C               	movlw	60
   733  0032  0631               	xorwf	_timeMinutes,w
   734  0033  1D03               	btfss	3,2
   735  0034  283E               	goto	i1l934
   736                           
   737                           ;Main.c: 213: timeMinutes = 0;
   738  0035  01B1               	clrf	_timeMinutes
   739                           
   740                           ;Main.c: 215: timeHours++;
   741  0036  3001               	movlw	1
   742  0037  00FC               	movwf	??_onInterrupt
   743  0038  087C               	movf	??_onInterrupt,w
   744  0039  07B0               	addwf	_timeHours,f
   745                           
   746                           ;Main.c: 217: if (timeHours == 24) {
   747  003A  3018               	movlw	24
   748  003B  0630               	xorwf	_timeHours,w
   749  003C  1903               	btfsc	3,2
   750                           
   751                           ;Main.c: 218: timeHours = 0;
   752  003D  01B0               	clrf	_timeHours
   753  003E                     i1l934:	
   754                           
   755                           ;Main.c: 219: }
   756                           ;Main.c: 220: }
   757                           ;Main.c: 222: updateDisplay();
   758  003E  3180  2084  3180   	fcall	_updateDisplay
   759  0041                     i1l936:	
   760                           
   761                           ;Main.c: 223: }
   762                           ;Main.c: 224: }
   763                           ;Main.c: 227: if (RB4 && !RB5) {
   764  0041  0020               	movlb	0	; select bank0
   765  0042  1A0D               	btfsc	13,4	;volatile
   766  0043  1A8D               	btfsc	13,5	;volatile
   767  0044  285D               	goto	i1l954
   768                           
   769                           ;Main.c: 228: setTimer++;
   770  0045  3001               	movlw	1
   771  0046  07BB               	addwf	_setTimer,f
   772  0047  3000               	movlw	0
   773  0048  3DBC               	addwfc	_setTimer+1,f
   774                           
   775                           ;Main.c: 231: if (setTimer == 500) {
   776  0049  30F4               	movlw	244
   777  004A  063B               	xorwf	_setTimer,w
   778  004B  1D03               	skipz
   779  004C  285D               	goto	i1l954
   780  004D  033C               	decf	_setTimer+1,w
   781  004E  1D03               	btfss	3,2
   782  004F  285D               	goto	i1l954
   783                           
   784                           ;Main.c: 232: setTimer = 0;
   785  0050  01BB               	clrf	_setTimer
   786  0051  01BC               	clrf	_setTimer+1
   787                           
   788                           ;Main.c: 234: timeHours++;
   789  0052  3001               	movlw	1
   790  0053  00FC               	movwf	??_onInterrupt
   791  0054  087C               	movf	??_onInterrupt,w
   792  0055  07B0               	addwf	_timeHours,f
   793                           
   794                           ;Main.c: 236: if (timeHours == 24) {
   795  0056  3018               	movlw	24
   796  0057  0630               	xorwf	_timeHours,w
   797  0058  1903               	btfsc	3,2
   798                           
   799                           ;Main.c: 237: timeHours = 0;
   800  0059  01B0               	clrf	_timeHours
   801                           
   802                           ;Main.c: 238: }
   803                           ;Main.c: 240: updateDisplay();
   804  005A  3180  2084  3180   	fcall	_updateDisplay
   805  005D                     i1l954:	
   806                           
   807                           ;Main.c: 241: }
   808                           ;Main.c: 242: }
   809                           ;Main.c: 245: if (RB4 && RB5) {
   810  005D  0020               	movlb	0	; select bank0
   811  005E  1A0D               	btfsc	13,4	;volatile
   812  005F  1E8D               	btfss	13,5	;volatile
   813  0060  2865               	goto	i1l92
   814                           
   815                           ;Main.c: 246: setTimer = 500 - 1;
   816  0061  30F3               	movlw	243
   817  0062  00BB               	movwf	_setTimer
   818  0063  3001               	movlw	1
   819  0064  00BC               	movwf	_setTimer+1
   820  0065                     i1l92:	
   821  0065  087D               	movf	??_onInterrupt+1,w
   822  0066  0020               	movlb	0	; select bank0
   823  0067  00FF               	movwf	127
   824  0068  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   825  0069  0009               	retfie
   826  006A                     __end_of_onInterrupt:	
   827                           
   828                           	psect	text3
   829  0084                     __ptext3:	
   830 ;; *************** function _updateDisplay *****************
   831 ;; Defined at:
   832 ;;		line 161 in file "Main.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;		None
   835 ;; Auto vars:     Size  Location     Type
   836 ;;		None
   837 ;; Return value:  Size  Location     Type
   838 ;;		None               void
   839 ;; Registers used:
   840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   846 ;;      Params:         0       0       0       0       0       0       0       0
   847 ;;      Locals:         0       0       0       0       0       0       0       0
   848 ;;      Temps:          0       3       0       0       0       0       0       0
   849 ;;      Totals:         0       3       0       0       0       0       0       0
   850 ;;Total ram usage:        3 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    1
   853 ;; This function calls:
   854 ;;		___awdiv
   855 ;;		___awmod
   856 ;; This function is called by:
   857 ;;		_onInterrupt
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           
   862                           ;psect for function _updateDisplay
   863  0084                     _updateDisplay:	
   864                           
   865                           ;Main.c: 163: if (timeSeconds % 2) {
   866                           
   867                           ;incstack = 0
   868                           ; Regs used in _updateDisplay: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   869  0084  0020               	movlb	0	; select bank0
   870  0085  1C32               	btfss	_timeSeconds,0
   871  0086  288C               	goto	i1l884
   872                           
   873                           ;Main.c: 164: displayValue[0] = DISPLAY_MAPPING[10];
   874  0087  082A               	movf	_DISPLAY_MAPPING+10,w
   875  0088  00B8               	movwf	??_updateDisplay
   876  0089  0838               	movf	??_updateDisplay,w
   877  008A  00AB               	movwf	_displayValue
   878                           
   879                           ;Main.c: 165: } else {
   880  008B  288D               	goto	i1l886
   881  008C                     i1l884:	
   882                           
   883                           ;Main.c: 166: displayValue[0] = 0x00;
   884  008C  01AB               	clrf	_displayValue
   885  008D                     i1l886:	
   886                           
   887                           ;Main.c: 167: }
   888                           ;Main.c: 170: displayValue[1] = DISPLAY_MAPPING[timeHours % 100 / 10];
   889  008D  300A               	movlw	10
   890  008E  00F7               	movwf	___awdiv@divisor
   891  008F  3000               	movlw	0
   892  0090  00F8               	movwf	___awdiv@divisor+1
   893  0091  0830               	movf	_timeHours,w
   894  0092  00B8               	movwf	??_updateDisplay
   895  0093  01B9               	clrf	??_updateDisplay+1
   896  0094  0838               	movf	??_updateDisplay,w
   897  0095  00F2               	movwf	___awmod@dividend
   898  0096  0839               	movf	??_updateDisplay+1,w
   899  0097  00F3               	movwf	___awmod@dividend+1
   900  0098  3064               	movlw	100
   901  0099  00F0               	movwf	___awmod@divisor
   902  009A  3000               	movlw	0
   903  009B  00F1               	movwf	___awmod@divisor+1
   904  009C  3181  2151  3180   	fcall	___awmod
   905  009F  0871               	movf	?___awmod+1,w
   906  00A0  00FA               	movwf	___awdiv@dividend+1
   907  00A1  0870               	movf	?___awmod,w
   908  00A2  00F9               	movwf	___awdiv@dividend
   909  00A3  3180  20FF  3180   	fcall	___awdiv
   910  00A6  0877               	movf	?___awdiv,w
   911  00A7  3E20               	addlw	(low (_DISPLAY_MAPPING| 0))& (0+255)
   912  00A8  0086               	movwf	6
   913  00A9  0187               	clrf	7
   914  00AA  0801               	movf	1,w
   915  00AB  0020               	movlb	0	; select bank0
   916  00AC  00BA               	movwf	??_updateDisplay+2
   917  00AD  083A               	movf	??_updateDisplay+2,w
   918  00AE  00AC               	movwf	_displayValue+1
   919                           
   920                           ;Main.c: 171: displayValue[2] = DISPLAY_MAPPING[timeHours % 10];
   921  00AF  300A               	movlw	10
   922  00B0  00F0               	movwf	___awmod@divisor
   923  00B1  3000               	movlw	0
   924  00B2  00F1               	movwf	___awmod@divisor+1
   925  00B3  0830               	movf	_timeHours,w
   926  00B4  00B8               	movwf	??_updateDisplay
   927  00B5  01B9               	clrf	??_updateDisplay+1
   928  00B6  0838               	movf	??_updateDisplay,w
   929  00B7  00F2               	movwf	___awmod@dividend
   930  00B8  0839               	movf	??_updateDisplay+1,w
   931  00B9  00F3               	movwf	___awmod@dividend+1
   932  00BA  3181  2151  3180   	fcall	___awmod
   933  00BD  0870               	movf	?___awmod,w
   934  00BE  3E20               	addlw	(low (_DISPLAY_MAPPING| 0))& (0+255)
   935  00BF  0086               	movwf	6
   936  00C0  0187               	clrf	7
   937  00C1  0801               	movf	1,w
   938  00C2  0020               	movlb	0	; select bank0
   939  00C3  00BA               	movwf	??_updateDisplay+2
   940  00C4  083A               	movf	??_updateDisplay+2,w
   941  00C5  00AD               	movwf	_displayValue+2
   942                           
   943                           ;Main.c: 172: displayValue[3] = DISPLAY_MAPPING[timeMinutes % 100 / 10];
   944  00C6  300A               	movlw	10
   945  00C7  00F7               	movwf	___awdiv@divisor
   946  00C8  3000               	movlw	0
   947  00C9  00F8               	movwf	___awdiv@divisor+1
   948  00CA  0831               	movf	_timeMinutes,w
   949  00CB  00B8               	movwf	??_updateDisplay
   950  00CC  01B9               	clrf	??_updateDisplay+1
   951  00CD  0838               	movf	??_updateDisplay,w
   952  00CE  00F2               	movwf	___awmod@dividend
   953  00CF  0839               	movf	??_updateDisplay+1,w
   954  00D0  00F3               	movwf	___awmod@dividend+1
   955  00D1  3064               	movlw	100
   956  00D2  00F0               	movwf	___awmod@divisor
   957  00D3  3000               	movlw	0
   958  00D4  00F1               	movwf	___awmod@divisor+1
   959  00D5  3181  2151  3180   	fcall	___awmod
   960  00D8  0871               	movf	?___awmod+1,w
   961  00D9  00FA               	movwf	___awdiv@dividend+1
   962  00DA  0870               	movf	?___awmod,w
   963  00DB  00F9               	movwf	___awdiv@dividend
   964  00DC  3180  20FF  3180   	fcall	___awdiv
   965  00DF  0877               	movf	?___awdiv,w
   966  00E0  3E20               	addlw	(low (_DISPLAY_MAPPING| 0))& (0+255)
   967  00E1  0086               	movwf	6
   968  00E2  0187               	clrf	7
   969  00E3  0801               	movf	1,w
   970  00E4  0020               	movlb	0	; select bank0
   971  00E5  00BA               	movwf	??_updateDisplay+2
   972  00E6  083A               	movf	??_updateDisplay+2,w
   973  00E7  00AE               	movwf	_displayValue+3
   974                           
   975                           ;Main.c: 173: displayValue[4] = DISPLAY_MAPPING[timeMinutes % 10];
   976  00E8  300A               	movlw	10
   977  00E9  00F0               	movwf	___awmod@divisor
   978  00EA  3000               	movlw	0
   979  00EB  00F1               	movwf	___awmod@divisor+1
   980  00EC  0831               	movf	_timeMinutes,w
   981  00ED  00B8               	movwf	??_updateDisplay
   982  00EE  01B9               	clrf	??_updateDisplay+1
   983  00EF  0838               	movf	??_updateDisplay,w
   984  00F0  00F2               	movwf	___awmod@dividend
   985  00F1  0839               	movf	??_updateDisplay+1,w
   986  00F2  00F3               	movwf	___awmod@dividend+1
   987  00F3  3181  2151         	fcall	___awmod
   988  00F5  0870               	movf	?___awmod,w
   989  00F6  3E20               	addlw	(low (_DISPLAY_MAPPING| 0))& (0+255)
   990  00F7  0086               	movwf	6
   991  00F8  0187               	clrf	7
   992  00F9  0801               	movf	1,w
   993  00FA  0020               	movlb	0	; select bank0
   994  00FB  00BA               	movwf	??_updateDisplay+2
   995  00FC  083A               	movf	??_updateDisplay+2,w
   996  00FD  00AF               	movwf	_displayValue+4
   997  00FE  0008               	return
   998  00FF                     __end_of_updateDisplay:	
   999                           
  1000                           	psect	text4
  1001  0151                     __ptext4:	
  1002 ;; *************** function ___awmod *****************
  1003 ;; Defined at:
  1004 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  divisor         2    0[COMMON] int 
  1007 ;;  dividend        2    2[COMMON] int 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  sign            1    6[COMMON] unsigned char 
  1010 ;;  counter         1    5[COMMON] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  2    0[COMMON] int 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1020 ;;      Params:         4       0       0       0       0       0       0       0
  1021 ;;      Locals:         2       0       0       0       0       0       0       0
  1022 ;;      Temps:          1       0       0       0       0       0       0       0
  1023 ;;      Totals:         7       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        7 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; This function calls:
  1027 ;;		Nothing
  1028 ;; This function is called by:
  1029 ;;		_updateDisplay
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           
  1034                           ;psect for function ___awmod
  1035  0151                     ___awmod:	
  1036                           
  1037                           ;incstack = 0
  1038                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1039  0151  01F6               	clrf	___awmod@sign
  1040  0152  1FF3               	btfss	___awmod@dividend+1,7
  1041  0153  295B               	goto	i1l808
  1042  0154  09F2               	comf	___awmod@dividend,f
  1043  0155  09F3               	comf	___awmod@dividend+1,f
  1044  0156  0AF2               	incf	___awmod@dividend,f
  1045  0157  1903               	skipnz
  1046  0158  0AF3               	incf	___awmod@dividend+1,f
  1047  0159  01F6               	clrf	___awmod@sign
  1048  015A  0AF6               	incf	___awmod@sign,f
  1049  015B                     i1l808:	
  1050  015B  1FF1               	btfss	___awmod@divisor+1,7
  1051  015C  2962               	goto	i1l812
  1052  015D  09F0               	comf	___awmod@divisor,f
  1053  015E  09F1               	comf	___awmod@divisor+1,f
  1054  015F  0AF0               	incf	___awmod@divisor,f
  1055  0160  1903               	skipnz
  1056  0161  0AF1               	incf	___awmod@divisor+1,f
  1057  0162                     i1l812:	
  1058  0162  0870               	movf	___awmod@divisor,w
  1059  0163  0471               	iorwf	___awmod@divisor+1,w
  1060  0164  1903               	btfsc	3,2
  1061  0165  2989               	goto	i1l830
  1062  0166  01F5               	clrf	___awmod@counter
  1063  0167  0AF5               	incf	___awmod@counter,f
  1064  0168                     i1l820:	
  1065  0168  1BF1               	btfsc	___awmod@divisor+1,7
  1066  0169  2974               	goto	i1l822
  1067  016A  3001               	movlw	1
  1068  016B                     u52_25:	
  1069  016B  35F0               	lslf	___awmod@divisor,f
  1070  016C  0DF1               	rlf	___awmod@divisor+1,f
  1071  016D  0B89               	decfsz	9,f
  1072  016E  296B               	goto	u52_25
  1073  016F  3001               	movlw	1
  1074  0170  00F4               	movwf	??___awmod
  1075  0171  0874               	movf	??___awmod,w
  1076  0172  07F5               	addwf	___awmod@counter,f
  1077  0173  2968               	goto	i1l820
  1078  0174                     i1l822:	
  1079  0174  0871               	movf	___awmod@divisor+1,w
  1080  0175  0273               	subwf	___awmod@dividend+1,w
  1081  0176  1D03               	skipz
  1082  0177  297A               	goto	u54_25
  1083  0178  0870               	movf	___awmod@divisor,w
  1084  0179  0272               	subwf	___awmod@dividend,w
  1085  017A                     u54_25:	
  1086  017A  1C03               	skipc
  1087  017B  2980               	goto	i1l826
  1088  017C  0870               	movf	___awmod@divisor,w
  1089  017D  02F2               	subwf	___awmod@dividend,f
  1090  017E  0871               	movf	___awmod@divisor+1,w
  1091  017F  3BF3               	subwfb	___awmod@dividend+1,f
  1092  0180                     i1l826:	
  1093  0180  3001               	movlw	1
  1094  0181                     u55_25:	
  1095  0181  36F1               	lsrf	___awmod@divisor+1,f
  1096  0182  0CF0               	rrf	___awmod@divisor,f
  1097  0183  0B89               	decfsz	9,f
  1098  0184  2981               	goto	u55_25
  1099  0185  3001               	movlw	1
  1100  0186  02F5               	subwf	___awmod@counter,f
  1101  0187  1D03               	btfss	3,2
  1102  0188  2974               	goto	i1l822
  1103  0189                     i1l830:	
  1104  0189  0876               	movf	___awmod@sign,w
  1105  018A  1903               	btfsc	3,2
  1106  018B  2991               	goto	i1l834
  1107  018C  09F2               	comf	___awmod@dividend,f
  1108  018D  09F3               	comf	___awmod@dividend+1,f
  1109  018E  0AF2               	incf	___awmod@dividend,f
  1110  018F  1903               	skipnz
  1111  0190  0AF3               	incf	___awmod@dividend+1,f
  1112  0191                     i1l834:	
  1113  0191  0873               	movf	___awmod@dividend+1,w
  1114  0192  00F1               	movwf	?___awmod+1
  1115  0193  0872               	movf	___awmod@dividend,w
  1116  0194  00F0               	movwf	?___awmod
  1117  0195  0008               	return
  1118  0196                     __end_of___awmod:	
  1119                           
  1120                           	psect	text5
  1121  00FF                     __ptext5:	
  1122 ;; *************** function ___awdiv *****************
  1123 ;; Defined at:
  1124 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  divisor         2    7[COMMON] int 
  1127 ;;  dividend        2    9[COMMON] int 
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;  quotient        2    2[BANK0 ] int 
  1130 ;;  sign            1    1[BANK0 ] unsigned char 
  1131 ;;  counter         1    0[BANK0 ] unsigned char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  2    7[COMMON] int 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2, status,0
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1141 ;;      Params:         4       0       0       0       0       0       0       0
  1142 ;;      Locals:         0       4       0       0       0       0       0       0
  1143 ;;      Temps:          1       0       0       0       0       0       0       0
  1144 ;;      Totals:         5       4       0       0       0       0       0       0
  1145 ;;Total ram usage:        9 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; This function calls:
  1148 ;;		Nothing
  1149 ;; This function is called by:
  1150 ;;		_updateDisplay
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           
  1155                           ;psect for function ___awdiv
  1156  00FF                     ___awdiv:	
  1157                           
  1158                           ;incstack = 0
  1159                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1160  00FF  0020               	movlb	0	; select bank0
  1161  0100  01B5               	clrf	___awdiv@sign
  1162  0101  1FF8               	btfss	___awdiv@divisor+1,7
  1163  0102  290A               	goto	i1l764
  1164  0103  09F7               	comf	___awdiv@divisor,f
  1165  0104  09F8               	comf	___awdiv@divisor+1,f
  1166  0105  0AF7               	incf	___awdiv@divisor,f
  1167  0106  1903               	skipnz
  1168  0107  0AF8               	incf	___awdiv@divisor+1,f
  1169  0108  01B5               	clrf	___awdiv@sign
  1170  0109  0AB5               	incf	___awdiv@sign,f
  1171  010A                     i1l764:	
  1172  010A  1FFA               	btfss	___awdiv@dividend+1,7
  1173  010B  2915               	goto	i1l770
  1174  010C  09F9               	comf	___awdiv@dividend,f
  1175  010D  09FA               	comf	___awdiv@dividend+1,f
  1176  010E  0AF9               	incf	___awdiv@dividend,f
  1177  010F  1903               	skipnz
  1178  0110  0AFA               	incf	___awdiv@dividend+1,f
  1179  0111  3001               	movlw	1
  1180  0112  00FB               	movwf	??___awdiv
  1181  0113  087B               	movf	??___awdiv,w
  1182  0114  06B5               	xorwf	___awdiv@sign,f
  1183  0115                     i1l770:	
  1184  0115  01B6               	clrf	___awdiv@quotient
  1185  0116  01B7               	clrf	___awdiv@quotient+1
  1186  0117  0877               	movf	___awdiv@divisor,w
  1187  0118  0478               	iorwf	___awdiv@divisor+1,w
  1188  0119  1903               	btfsc	3,2
  1189  011A  2944               	goto	i1l792
  1190  011B  01B4               	clrf	___awdiv@counter
  1191  011C  0AB4               	incf	___awdiv@counter,f
  1192  011D                     i1l780:	
  1193  011D  1BF8               	btfsc	___awdiv@divisor+1,7
  1194  011E  2929               	goto	i1l782
  1195  011F  3001               	movlw	1
  1196  0120                     u42_25:	
  1197  0120  35F7               	lslf	___awdiv@divisor,f
  1198  0121  0DF8               	rlf	___awdiv@divisor+1,f
  1199  0122  0B89               	decfsz	9,f
  1200  0123  2920               	goto	u42_25
  1201  0124  3001               	movlw	1
  1202  0125  00FB               	movwf	??___awdiv
  1203  0126  087B               	movf	??___awdiv,w
  1204  0127  07B4               	addwf	___awdiv@counter,f
  1205  0128  291D               	goto	i1l780
  1206  0129                     i1l782:	
  1207  0129  3001               	movlw	1
  1208  012A                     u44_25:	
  1209  012A  35B6               	lslf	___awdiv@quotient,f
  1210  012B  0DB7               	rlf	___awdiv@quotient+1,f
  1211  012C  0B89               	decfsz	9,f
  1212  012D  292A               	goto	u44_25
  1213  012E  0878               	movf	___awdiv@divisor+1,w
  1214  012F  027A               	subwf	___awdiv@dividend+1,w
  1215  0130  1D03               	skipz
  1216  0131  2934               	goto	u45_25
  1217  0132  0877               	movf	___awdiv@divisor,w
  1218  0133  0279               	subwf	___awdiv@dividend,w
  1219  0134                     u45_25:	
  1220  0134  1C03               	skipc
  1221  0135  293B               	goto	i1l788
  1222  0136  0877               	movf	___awdiv@divisor,w
  1223  0137  02F9               	subwf	___awdiv@dividend,f
  1224  0138  0878               	movf	___awdiv@divisor+1,w
  1225  0139  3BFA               	subwfb	___awdiv@dividend+1,f
  1226  013A  1436               	bsf	___awdiv@quotient,0
  1227  013B                     i1l788:	
  1228  013B  3001               	movlw	1
  1229  013C                     u46_25:	
  1230  013C  36F8               	lsrf	___awdiv@divisor+1,f
  1231  013D  0CF7               	rrf	___awdiv@divisor,f
  1232  013E  0B89               	decfsz	9,f
  1233  013F  293C               	goto	u46_25
  1234  0140  3001               	movlw	1
  1235  0141  02B4               	subwf	___awdiv@counter,f
  1236  0142  1D03               	btfss	3,2
  1237  0143  2929               	goto	i1l782
  1238  0144                     i1l792:	
  1239  0144  0835               	movf	___awdiv@sign,w
  1240  0145  1903               	btfsc	3,2
  1241  0146  294C               	goto	i1l796
  1242  0147  09B6               	comf	___awdiv@quotient,f
  1243  0148  09B7               	comf	___awdiv@quotient+1,f
  1244  0149  0AB6               	incf	___awdiv@quotient,f
  1245  014A  1903               	skipnz
  1246  014B  0AB7               	incf	___awdiv@quotient+1,f
  1247  014C                     i1l796:	
  1248  014C  0837               	movf	___awdiv@quotient+1,w
  1249  014D  00F8               	movwf	?___awdiv+1
  1250  014E  0836               	movf	___awdiv@quotient,w
  1251  014F  00F7               	movwf	?___awdiv
  1252  0150  0008               	return
  1253  0151                     __end_of___awdiv:	
  1254                           
  1255                           	psect	text6
  1256  01E4                     __ptext6:	
  1257 ;; *************** function _updateClock *****************
  1258 ;; Defined at:
  1259 ;;		line 125 in file "Main.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;		None               void
  1266 ;; Registers used:
  1267 ;;		wreg, status,2, status,0
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1273 ;;      Params:         0       0       0       0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0       0       0       0
  1275 ;;      Temps:          1       0       0       0       0       0       0       0
  1276 ;;      Totals:         1       0       0       0       0       0       0       0
  1277 ;;Total ram usage:        1 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_onInterrupt
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           
  1287                           ;psect for function _updateClock
  1288  01E4                     _updateClock:	
  1289                           
  1290                           ;Main.c: 126: timeSeconds++;
  1291                           
  1292                           ;incstack = 0
  1293                           ; Regs used in _updateClock: [wreg+status,2+status,0]
  1294  01E4  3001               	movlw	1
  1295  01E5  00F0               	movwf	??_updateClock
  1296  01E6  0870               	movf	??_updateClock,w
  1297  01E7  0020               	movlb	0	; select bank0
  1298  01E8  07B2               	addwf	_timeSeconds,f
  1299                           
  1300                           ;Main.c: 128: if (timeSeconds == 120) {
  1301  01E9  3078               	movlw	120
  1302  01EA  0632               	xorwf	_timeSeconds,w
  1303  01EB  1D03               	btfss	3,2
  1304  01EC  0008               	return
  1305                           
  1306                           ;Main.c: 129: timeSeconds = 0;
  1307  01ED  01B2               	clrf	_timeSeconds
  1308                           
  1309                           ;Main.c: 131: timeMinutes++;
  1310  01EE  3001               	movlw	1
  1311  01EF  00F0               	movwf	??_updateClock
  1312  01F0  0870               	movf	??_updateClock,w
  1313  01F1  07B1               	addwf	_timeMinutes,f
  1314                           
  1315                           ;Main.c: 133: if (timeMinutes == 60) {
  1316  01F2  303C               	movlw	60
  1317  01F3  0631               	xorwf	_timeMinutes,w
  1318  01F4  1D03               	btfss	3,2
  1319  01F5  0008               	return
  1320                           
  1321                           ;Main.c: 134: timeMinutes = 0;
  1322  01F6  01B1               	clrf	_timeMinutes
  1323                           
  1324                           ;Main.c: 136: timeHours++;
  1325  01F7  3001               	movlw	1
  1326  01F8  00F0               	movwf	??_updateClock
  1327  01F9  0870               	movf	??_updateClock,w
  1328  01FA  07B0               	addwf	_timeHours,f
  1329                           
  1330                           ;Main.c: 138: if (timeHours == 24) {
  1331  01FB  3018               	movlw	24
  1332  01FC  0630               	xorwf	_timeHours,w
  1333  01FD  1D03               	btfss	3,2
  1334  01FE  0008               	return
  1335                           
  1336                           ;Main.c: 139: timeHours = 0;
  1337  01FF  01B0               	clrf	_timeHours
  1338  0200  0008               	return
  1339  0201                     __end_of_updateClock:	
  1340                           
  1341                           	psect	text7
  1342  01C1                     __ptext7:	
  1343 ;; *************** function _multiplexDisplay *****************
  1344 ;; Defined at:
  1345 ;;		line 146 in file "Main.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;		None               void
  1352 ;; Registers used:
  1353 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1359 ;;      Params:         0       0       0       0       0       0       0       0
  1360 ;;      Locals:         0       0       0       0       0       0       0       0
  1361 ;;      Temps:          1       0       0       0       0       0       0       0
  1362 ;;      Totals:         1       0       0       0       0       0       0       0
  1363 ;;Total ram usage:        1 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_onInterrupt
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           
  1373                           ;psect for function _multiplexDisplay
  1374  01C1                     _multiplexDisplay:	
  1375                           
  1376                           ;Main.c: 147: displayDigit++;
  1377                           
  1378                           ;incstack = 0
  1379                           ; Regs used in _multiplexDisplay: [wreg+fsr1l+fsr1h+status,2+status,0]
  1380  01C1  3001               	movlw	1
  1381  01C2  00F0               	movwf	??_multiplexDisplay
  1382  01C3  0870               	movf	??_multiplexDisplay,w
  1383  01C4  0020               	movlb	0	; select bank0
  1384  01C5  07B3               	addwf	_displayDigit,f
  1385                           
  1386                           ;Main.c: 150: if (displayDigit > 4) {
  1387  01C6  3005               	movlw	5
  1388  01C7  0233               	subwf	_displayDigit,w
  1389  01C8  1C03               	skipc
  1390  01C9  29CE               	goto	i1l876
  1391                           
  1392                           ;Main.c: 151: displayDigit = 0;
  1393  01CA  01B3               	clrf	_displayDigit
  1394                           
  1395                           ;Main.c: 152: LATB = 0x00;
  1396  01CB  0022               	movlb	2	; select bank2
  1397  01CC  018D               	clrf	13	;volatile
  1398                           
  1399                           ;Main.c: 153: } else {
  1400  01CD  29DB               	goto	i1l878
  1401  01CE                     i1l876:	
  1402                           
  1403                           ;Main.c: 154: LATB = 1 << displayDigit - 1;
  1404  01CE  3001               	movlw	1
  1405  01CF  00F0               	movwf	??_multiplexDisplay
  1406  01D0  0020               	movlb	0	; select bank0
  1407  01D1  0833               	movf	_displayDigit,w
  1408  01D2  3EFF               	addlw	-1
  1409  01D3  0A89               	incf	9,f
  1410  01D4  29D6               	goto	u62_24
  1411  01D5                     u62_25:	
  1412  01D5  35F0               	lslf	??_multiplexDisplay,f
  1413  01D6                     u62_24:	
  1414  01D6  0B89               	decfsz	9,f
  1415  01D7  29D5               	goto	u62_25
  1416  01D8  0870               	movf	??_multiplexDisplay,w
  1417  01D9  0022               	movlb	2	; select bank2
  1418  01DA  008D               	movwf	13	;volatile
  1419  01DB                     i1l878:	
  1420                           
  1421                           ;Main.c: 155: }
  1422                           ;Main.c: 157: LATA = ~displayValue[displayDigit];
  1423  01DB  0020               	movlb	0	; select bank0
  1424  01DC  0833               	movf	_displayDigit,w
  1425  01DD  3E2B               	addlw	(low (_displayValue| 0))& (0+255)
  1426  01DE  0086               	movwf	6
  1427  01DF  0187               	clrf	7
  1428  01E0  0901               	comf	1,w
  1429  01E1  0022               	movlb	2	; select bank2
  1430  01E2  008C               	movwf	12	;volatile
  1431  01E3  0008               	return
  1432  01E4                     __end_of_multiplexDisplay:	
  1433  007E                     btemp	set	126	;btemp
  1434  007E                     int$flags	set	126
  1435  007E                     wtemp	set	126
  1436  007E                     wtemp0	set	126
  1437  0080                     wtemp1	set	128
  1438  0082                     wtemp2	set	130
  1439  0084                     wtemp3	set	132
  1440  0086                     wtemp4	set	134
  1441  0088                     wtemp5	set	136
  1442  007F                     wtemp6	set	127
  1443  007E                     ttemp	set	126
  1444  007E                     ttemp0	set	126
  1445  0081                     ttemp1	set	129
  1446  0084                     ttemp2	set	132
  1447  0087                     ttemp3	set	135
  1448  007F                     ttemp4	set	127
  1449  007E                     ltemp	set	126
  1450  007E                     ltemp0	set	126
  1451  0082                     ltemp1	set	130
  1452  0086                     ltemp2	set	134
  1453  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         9
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      7      29
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _onInterrupt in COMMON

    _updateDisplay->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _onInterrupt in BANK0

    _onInterrupt->_updateDisplay
    _updateDisplay->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _onInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _onInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _onInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _onInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _onInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _onInterrupt in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _onInterrupt                                          2     2      0    1232
                                             12 COMMON     2     2      0
                   _multiplexDisplay
                        _updateClock
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (3) _updateDisplay                                        3     3      0    1232
                                              4 BANK0      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     720
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     512
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _updateClock                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _multiplexDisplay                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup

 _onInterrupt (ROOT)
   _multiplexDisplay
   _updateClock
   _updateDisplay
     ___awdiv
       ___awmod (ARG)
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      7      1D       6       36.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      2B      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Apr 23 20:43:53 2016

              __CFG_CP$OFF 0000                         l60 0215               ___awdiv@sign 0035  
                      _RB4 006C                        _RB5 006D               __CFG_CPD$OFF 0000  
             ___awmod@sign 0076               __CFG_BORV$HI 0000                        wreg 0009  
             __CFG_IESO$ON 0000               __CFG_LVP$OFF 0000                       _LATA 010C  
                     _LATB 010D                       _PIE1 0091                       i1l92 0065  
           ?_updateDisplay 0070                       _WPUA 020C                       _WPUB 020D  
             __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000                       _main 0212  
                     fsr0h 0005                       fsr1h 0007                       fsr0l 0004  
                     indf1 0001                       fsr1l 0006                       btemp 007E  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 006A  
                     ttemp 007E                       wtemp 007E              __CFG_MCLRE$ON 0000  
             ?_onInterrupt 0070                      ?_main 0070            __end_of___awdiv 0151  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0196            ___awdiv@divisor 0077  
                    _T1CON 0018                      i1l820 0168                      i1l812 0162  
                    i1l822 0174                      i1l830 0189                      i1l808 015B  
                    i1l770 0115                      i1l834 0191                      i1l826 0180  
                    i1l906 0016                      i1l780 011D                      i1l764 010A  
                    i1l782 0129                      i1l934 003E                      i1l792 0144  
                    i1l936 0041                      i1l954 005D                      i1l876 01CE  
                    i1l796 014C                      i1l788 013B                      i1l884 008C  
                    i1l878 01DB                      i1l886 008D            ___awdiv@counter 0034  
                    _TMR1H 0017                      _TMR1L 0016                      u42_25 0120  
                    _PORTA 000C                      u44_25 012A                      u52_25 016B  
                    u45_25 0134                      u62_24 01D6                      u62_25 01D5  
                    u46_25 013C                      u54_25 017A                      u55_25 0181  
                    _TRISA 008C                      _TRISB 008D                      _setup 0196  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F            __initialization 006C  
             __end_of_main 0216                     ??_main 003B             __CFG_PLLEN$OFF 0000  
__size_of_multiplexDisplay 0023            ??_updateDisplay 0038           ___awdiv@dividend 0079  
                   ?_setup 0070                     _ANSELA 018C                     _ANSELB 018D  
                   _INTCON 000B                     _OSCCON 0099                     _TMR0IF 005A  
                   _TMR1IF 0088             __CFG_PWRTE$OFF 0000                  ??___awdiv 007B  
           __CFG_STVREN$ON 0000                  ??___awmod 0074           ___awdiv@quotient 0036  
          ___awmod@divisor 0070            ___awmod@counter 0075    __end_of__initialization 0080  
             ?_updateClock 0070             __pcstackCOMMON 0070               __pidataBANK0 0201  
            __end_of_setup 01C1       __size_of_onInterrupt 0066                    ??_setup 003B  
               __pbssBANK0 002B            __CFG_VCAPEN$OFF 0000                 __pmaintext 0212  
               __pintentry 0004           _multiplexDisplay 01C1                    ___awdiv 00FF  
                  ___awmod 0151                    __ptext1 0196                    __ptext3 0084  
                  __ptext4 0151                    __ptext5 00FF                    __ptext6 01E4  
                  __ptext7 01C1           ___awmod@dividend 0072       end_of_initialization 0080  
                  init_ram 020C                    initloop 020D       __size_of_updateClock 001D  
             _displayDigit 0033               _displayValue 002B           __CFG_FOSC$INTOSC 0000  
    __end_of_updateDisplay 00FF        start_initialization 006C   __end_of_multiplexDisplay 01E4  
            ??_onInterrupt 007C                __pdataBANK0 0020                  ___latbits 0001  
            __pcstackBANK0 0034                  __pnvBANK0 003B            _DISPLAY_MAPPING 0020  
                 ?___awdiv 0077                   ?___awmod 0070        __end_of_onInterrupt 006A  
           __size_of_setup 002B                  _timeHours 0030              ??_updateClock 0070  
              _onInterrupt 0004           __size_of___awdiv 0052           __size_of___awmod 0045  
            __size_of_main 0004                   _setTimer 003B          ?_multiplexDisplay 0070  
                 int$flags 007E         ??_multiplexDisplay 0070        __end_of_updateClock 0201  
   __size_of_updateDisplay 007B                   intlevel1 0000          __CFG_CLKOUTEN$OFF 0000  
              _timeMinutes 0031                _timeSeconds 0032                 _OPTION_REG 0095  
            _updateDisplay 0084                _updateClock 01E4  
